import 'dart:io';
import 'dart:math';

class TicTacToeGame {
  late List<List<String>> board;
  late int boardSize;
  late String currentPlayer;
  late bool isPlayerVsPlayer;
  late bool isPlayerTurn;
  late Random random;

  TicTacToeGame() {
    random = Random();
  }

  void startGame() {
    print('\nüéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É "–ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏"!');
    
    while (true) {
      print('\n' + '=' * 50);
      print('üìã –ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ');
      print('=' * 50);
      print('1. üÜö –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ –¥—Ä—É–≥–∞');
      print('2. ü§ñ –ò–≥—Ä–∞—Ç—å –ø—Ä–æ—Ç–∏–≤ —Ä–æ–±–æ—Ç–∞');
      print('0. üö™ –í—ã—Ö–æ–¥');
      print('\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –∏–≥—Ä—ã (0-2): ');
      
      final choice = stdin.readLineSync()?.trim();
      
      switch (choice) {
        case '1':
          isPlayerVsPlayer = true;
          setupGame();
          break;
        case '2':
          isPlayerVsPlayer = false;
          setupGame();
          break;
        case '0':
          print('\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
          exit(0);
        default:
          print('\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
      }
    }
  }

  void setupGame() {
    // –ó–∞–ø—Ä–æ—Å —Ä–∞–∑–º–µ—Ä–∞ –ø–æ–ª—è
    while (true) {
      print('\nüìè –í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (3-10): ');
      final sizeInput = stdin.readLineSync()?.trim();
      
      if (sizeInput != null) {
        final size = int.tryParse(sizeInput);
        if (size != null && size >= 3 && size <= 10) {
          boardSize = size;
          break;
        }
      }
      print('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 3 –¥–æ 10.');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—è
    board = List.generate(
      boardSize, 
      (i) => List.generate(boardSize, (j) => ' ')
    );

    // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    currentPlayer = random.nextBool() ? 'X' : 'O';
    isPlayerTurn = true;

    print('\nüé≤ –ü–µ—Ä–≤—ã–º —Ö–æ–¥–∏—Ç –∏–≥—Ä–æ–∫: $currentPlayer');
    print('üéÆ –ù–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É!');
    
    playGame();
  }

  void playGame() {
    while (true) {
      displayBoard();
      
      if (checkWinner() != null) {
        displayWinner();
        break;
      }
      
      if (isBoardFull()) {
        displayDraw();
        break;
      }

      if (isPlayerVsPlayer || isPlayerTurn) {
        // –•–æ–¥ –∏–≥—Ä–æ–∫–∞
        makePlayerMove();
      } else {
        // –•–æ–¥ —Ä–æ–±–æ—Ç–∞
        makeRobotMove();
      }
      
      // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
      currentPlayer = currentPlayer == 'X' ? 'O' : 'X';
      isPlayerTurn = !isPlayerTurn;
    }
    
    askForNewGame();
  }

  void displayBoard() {
    print('\n' + '=' * (boardSize * 4 + 1));
    print('üéØ –ò–ì–†–û–í–û–ï –ü–û–õ–ï');
    print('=' * (boardSize * 4 + 1));
    
    // –ù—É–º–µ—Ä–∞—Ü–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
    print('   ' + List.generate(boardSize, (i) => '${(i + 1).toString().padLeft(2)}').join(' '));
    
    for (int i = 0; i < boardSize; i++) {
      String row = '${(i + 1).toString().padLeft(2)} ';
      for (int j = 0; j < boardSize; j++) {
        String cell = board[i][j];
        if (cell == ' ') {
          cell = '¬∑';
        }
        row += '|$cell ';
      }
      row += '|';
      print(row);
      
      if (i < boardSize - 1) {
        print('   ' + '---' * boardSize + '-');
      }
    }
    print('=' * (boardSize * 4 + 1));
  }

  void makePlayerMove() {
    while (true) {
      print('\nüéØ –•–æ–¥ –∏–≥—Ä–æ–∫–∞ $currentPlayer');
      print('–í–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (—Å—Ç—Ä–æ–∫–∞ —Å—Ç–æ–ª–±–µ—Ü, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1 2): ');
      
      final input = stdin.readLineSync()?.trim();
      if (input == null || input.isEmpty) {
        print('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã.');
        continue;
      }
      
      final coords = input.split(' ');
      if (coords.length != 2) {
        print('‚ùå –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.');
        continue;
      }
      
      final row = int.tryParse(coords[0]);
      final col = int.tryParse(coords[1]);
      
      if (row == null || col == null) {
        print('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞.');
        continue;
      }
      
      if (row < 1 || row > boardSize || col < 1 || col > boardSize) {
        print('‚ùå –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç 1 –¥–æ $boardSize.');
        continue;
      }
      
      if (board[row - 1][col - 1] != ' ') {
        print('‚ùå –≠—Ç–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞!');
        continue;
      }
      
      board[row - 1][col - 1] = currentPlayer;
      break;
    }
  }

  void makeRobotMove() {
    print('\nü§ñ –•–æ–¥ —Ä–æ–±–æ—Ç–∞...');
    
    // –ü—Ä–æ—Å—Ç–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –≤—ã–∏–≥—Ä–∞—Ç—å, –ø–æ—Ç–æ–º –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∏–≥—Ä–æ–∫–∞
    var move = findWinningMove('O') ?? findWinningMove('X') ?? findRandomMove();
    
    if (move != null) {
      board[move[0]][move[1]] = currentPlayer;
      print('ü§ñ –†–æ–±–æ—Ç –ø–æ—Å—Ç–∞–≤–∏–ª $currentPlayer –≤ –ø–æ–∑–∏—Ü–∏—é (${move[0] + 1}, ${move[1] + 1})');
    }
  }

  List<int>? findWinningMove(String player) {
    for (int i = 0; i < boardSize; i++) {
      for (int j = 0; j < boardSize; j++) {
        if (board[i][j] == ' ') {
          board[i][j] = player;
          if (checkWinner() == player) {
            board[i][j] = ' ';
            return [i, j];
          }
          board[i][j] = ' ';
        }
      }
    }
    return null;
  }

  List<int>? findRandomMove() {
    List<List<int>> emptyCells = [];
    for (int i = 0; i < boardSize; i++) {
      for (int j = 0; j < boardSize; j++) {
        if (board[i][j] == ' ') {
          emptyCells.add([i, j]);
        }
      }
    }
    
    if (emptyCells.isEmpty) return null;
    return emptyCells[random.nextInt(emptyCells.length)];
  }

  String? checkWinner() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–æ–∫
    for (int i = 0; i < boardSize; i++) {
      if (board[i][0] != ' ' && 
          board[i].every((cell) => cell == board[i][0])) {
        return board[i][0];
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
    for (int j = 0; j < boardSize; j++) {
      if (board[0][j] != ' ' && 
          List.generate(boardSize, (i) => board[i][j]).every((cell) => cell == board[0][j])) {
        return board[0][j];
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–∞–≤–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (board[0][0] != ' ' && 
        List.generate(boardSize, (i) => board[i][i]).every((cell) => cell == board[0][0])) {
      return board[0][0];
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–æ—á–Ω–æ–π –¥–∏–∞–≥–æ–Ω–∞–ª–∏
    if (board[0][boardSize - 1] != ' ' && 
        List.generate(boardSize, (i) => board[i][boardSize - 1 - i]).every((cell) => cell == board[0][boardSize - 1])) {
      return board[0][boardSize - 1];
    }
    
    return null;
  }

  bool isBoardFull() {
    for (int i = 0; i < boardSize; i++) {
      for (int j = 0; j < boardSize; j++) {
        if (board[i][j] == ' ') {
          return false;
        }
      }
    }
    return true;
  }

  void displayWinner() {
    displayBoard();
    final winner = checkWinner();
    print('\nüéâ –ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!');
    print('üèÜ –ü–æ–±–µ–¥–∏—Ç–µ–ª—å: $winner');
    
    if (isPlayerVsPlayer) {
      print('üë• –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞!');
    } else if (winner == 'O') {
      print('ü§ñ –†–æ–±–æ—Ç –ø–æ–±–µ–¥–∏–ª! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!');
    } else {
      print('üéØ –í—ã –ø–æ–±–µ–¥–∏–ª–∏ —Ä–æ–±–æ—Ç–∞! –û—Ç–ª–∏—á–Ω–æ!');
    }
  }

  void displayDraw() {
    displayBoard();
    print('\nü§ù –ù–ò–ß–¨–Ø!');
    print('üéØ –û—Ç–ª–∏—á–Ω–∞—è –∏–≥—Ä–∞! –ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–∏–≥—Ä–∞–ª!');
  }

  void askForNewGame() {
    print('\n' + '-' * 50);
    print('üîÑ –•–æ—Ç–∏—Ç–µ —Å—ã–≥—Ä–∞—Ç—å –µ—â–µ —Ä–∞–∑?');
    print('1. ‚úÖ –î–∞, –Ω–æ–≤–∞—è –∏–≥—Ä–∞');
    print('2. üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é');
    print('0. üö™ –í—ã—Ö–æ–¥');
    print('\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (0-2): ');
    
    final choice = stdin.readLineSync()?.trim();
    
    switch (choice) {
      case '1':
        setupGame();
        break;
      case '2':
        startGame();
        break;
      case '0':
        print('\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏–≥—Ä—É! –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
        exit(0);
      default:
        print('\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...');
        startGame();
    }
  }
}
